filled.contour(volcano,
color.palette = terrain.colors,
plot.title = title("Topografi Gunung Maunga Whau"),
key.title = title("Tinggi\n(meter)"))
{r}
c(1, 2, 3, 4)
c("r", "academy", "telkom", "university")
list(15, "r", "TRUE", 24L)
huruf_vokal <- c("a", "i", "u", "e", "o") # objek data tersimpan dengan nama 'huruf_vokal', namun tidak tercetak pada konsol
huruf_vokal # mencetak objek data dengan nama 'huruf_vokal' pada konsol
{r}
___(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(___) # cek tipe dari objek data dengan nama 'beragam'
iris # mencetak data di konsol
dim(iris) # memberikan dimensi dari data. Angka pertama merupakan jumlah baris dan angka kedua adalah jumlah kolom
str(iris) # mencetak struktur dari data (jumlah baris, jumlah kolom, nama kolom, jenis data pada kolom)
colnames(iris) # mencetak nama dari setiap kolom
head(iris) # mencetak 6 baris pertama pada data
head(iris, 10) # mencetak 10 baris pertama pada data
tail(iris) # mencetak 6 baris terakhir pada data
tail(iris, 10) # mencetak 10 baris terakhir pada data
summary(iris) # mencetak rangkuman data
iris[1, ] # subset data pada baris 1
iris[c(1, 6, 12),] # subset data pada baris 1, 6, dan 12
iris[ ,2] # subset atau ekstrak data pada kolom 2
iris[2,2] # ekstrak nilai pada baris 2 dan kolom 2
iris$Sepal.Length # ekstrak data pada kolom 'Sepal.Length'
class(iris$Species) # mengetahui jenis data dari suatu vektor
length(iris$Petal.Width) # mengetahui jumlah data pada suatu vektor
levels(iris$Species) # mengetahui level dari kolom berjenis faktor
length(levels(iris$Species)) # mengetahui jumlah level dari kolom berjenis faktor
unique(iris$Species) # mengetahui nilai unik dari kolom berjenis karakter atau faktor
length(unique(iris$Species)) # mengetahui jumlah nilai unik dari kolom berjenis karakter atau faktor
mean(iris$Sepal.Length) # menghitung rerata
sd(iris$Sepal.Length) # menghitung standar deviasi
median(iris$Sepal.Width) # menghitung median
sum(iris$Petal.Length) # menghitung jumlah total
plot(iris) # membuat plot
cor(iris[, -5]) # membuat matriks korelasi pada semua kolom berjenis numerik
write.csv(iris, file = "iris.csv", row.names = FALSE) # menyimpan iris menjadi berkas csv
___(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(___) # cek tipe dari objek data dengan nama 'beragam'
c("a", "i", "u", "e", "o")(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(c("a", "i", "u", "e", "o")) # cek tipe dari objek data dengan nama 'beragam'
c("a", "i", "u", "e", "o")(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(c("a", "i", "u", "e", "o")) # cek tipe dari objek data dengan nama 'beragam'
c("a", "i", "u", "e", "o")(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(c) # cek tipe dari objek data dengan nama 'beragam'
c("a", "i", "u", "e", "o")(huruf_vokal)
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(c) # cek tipe dari objek data dengan nama 'beragam'
huruf_vokal<-c("a", "i", "u", "e", "o")
uruf_vokal<-c("a", "i", "u", "e", "o")
beragam <- c(2.7, "berbeda", TRUE, 4L) # 2.7 bertipe double, "berbeda" bertipe character, TRUE bertipe logical, 4L bertipe integer
typeof(beragam) # cek tipe dari objek data dengan nama 'beragam'
knitr::pandoc()
knit_with_parameters('~/w1/vignettes/001_pendahuluan.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(readr)
evals <- read_csv("../data-raw/evals.csv")
evals
library(dplyr)
glimpse(dplyr)
library(dplyr)
glimpse(463)
install.packages("skimr")
library(dplyr)
glimpse("evals")
library(dplyr)
glimpse("evals")
glimpse("dplyr")
library(dplyr)
glimpse("___")
skim("skimr")
installed.packages("skimr")
install.packages("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skim("skimr")
skimr("skim")
skimr("skim")
skimr("skim")
install.packages("skimr")
library("skimr")
library("skimr")
skimr("skim")
library(dplyr)
glimpse(evals)
library("skimr")
skimr(evals)
library("skimr")
skim(evals)
glimpse(evals)
evals2 <- read_csv2("../data-raw/evals2.csv")
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
evals2 <- read_csv2("../data-raw/evals2.csv")
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
evals2 <- read_csv2("../data-raw/evals2.csv")
evals2 <- read_csv2("../data-raw/evals2.csv")
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
remote <- read_csv("___")
evals2 <- read_csv2("../data-raw/evals2.csv")
identical(evals, evals2) # fungsi untuk cek kesamaan antara dua obyek
remote <- read_csv("https://www.openintro.org/stat/data/evals.csv")
identical(remote, evals2)
library("tidyr")
library("tidyr")
library("tidyr")
identical(remote, evals2)
library("tidyr")
table1
table2
table3
table4a
table4b
table5
table1
table2
table3
table4a
table4b
table5
table5
knitr::opts_chunk$set(echo = TRUE)
tidyr(spread)
library("tidyr")
library("tidyr")
tidyr(spread)
spread(tidyr)
tidyr("spread")
spread(tidyr)
spread("tidyr")
spread("tidyr")
library("tidyr")
spread(tidyr)
library("tidyr")
spread(tidyr)
library(tidyr)
library(tidyr)
spread(tidyr)
spread(tidyr)
library(tidyr)
spread(table2)
spread(tidyr)
tabel2
library(tidyr)
library(tidyr)
tabel2
library("tidyr")
tabel2
library("tidyr")
library("tidyr")
spread(tidyr)
spread("tidyr")
spread(tidyr)
?spread
spread(table2)
table2
table2_tidy <- spread(table2, key = "type", value = "count")
table4a_tidy <- spread(table4a, key = "type", value = "count")# cetak dataset table4a
tabel4a
library(tidyr)
tabel4a
table4a
table4a_tidy <- spread(table4a, key = "type", value = "count")# cetak dataset table4a
table4a
table2_tidy <- spread(table2, key = "type", value = "count")
tabel2
table2
table1
table2_tidy <- spread(table2, key = "type", value = "count")
table2
table2_tidy <- spread(table2, key = "case", value = "population")
table1
table2
table2_tidy <- spread(table2, key = "case", value = "population")
table2_tidy <- spread(table2, key = "type", value = "count")
tabel2
table2
table2
table2_tidy <- spread(table2, type = "cases", count = "population")
table2_tidy <- spread(table2, type = "cases", count = "population")
table2
table4a
table2_tidy
table4a
gather(table4a, key = "year", value = "case", 2:3)
table4a_tidy <- table4a %>%
gather(key = "year", value = "cases", 2:3) # menggunakan tidyverse syntax, pipe %>%
table4b
table4b_tidy <- table4a %>%
table4b
table4b
gather(table4b, key = "year", value = "case", 2:3)
table4b
gather(table4b, key = "year", value = "case", 2:3)
table4b_tidy <- table4b %>%
table4b
gather(table4b, key = "year", value = "case", 2:3)
table4b_tidy <- table4b %>%
gather(key = "year", value = "cases", 2:3) # menggunakan tidyverse syntax, pipe %>%
library(dplyr) # mengaktifkan paket dplyr
mydata <- left_join(table4a_tidy, table4b_tidy)
library("dplyr") # mengaktifkan paket dplyr
mydata <- left_join(table4a_tidy, table4b_tidy)
library(dplyr) # mengaktifkan paket dplyr
mydata <- left_join(table4a_tidy, table4b_tidy)
glimpse(who)
glimpse(population)
# Menjalankan fungsi satu per satu
tb1 <- gather(who, key = "key", value = "case", new_sp_m014:newrel_f65)
tb2 <- select(tb1, country, year, case)
tb3 <- group_by(tb2, country, year)
tb4 <- summarise(tb3, cases = sum(case, na.rm = TRUE))
tb5 <- ungroup(tb4)
tb6 <- left_join(tb5, population)
tb7 <- filter(tb6, !is.na(population))
tb8 <- mutate(tb7, proportion = 100*cases/population)
# Syntax menggunakan pipe %>%
tb_all <-
who %>%
gather(key = "key", value = "case", new_sp_m014:newrel_f65) %>%
select(country, year, case) %>%
group_by(country, year) %>%
summarise(cases = sum(case, na.rm = TRUE)) %>%
ungroup() %>%
left_join(population) %>%
filter(!is.na(population)) %>%
mutate(proportion = 100*cases/population)
glimpse(tb8, tb_all)
library(dplyr)
glimpse(tb8, tb_all)
tb8
tball
library(dplyr)
tb8
tb_all
tb_all
tb8
tb_all
library(dplyr)
tb8
tb_all
glimpse(tb8, tb_all)
gather(tb8, tb_all)
library(dplyr)
tb8
tb_all
gather(tb8, tb_all)
mydata <- left_join (tb8, tb_all)
mydata2 <- left_join (tb8, tb_all)
tb8
tb_all
tb8
mydata <- left_join(table4a_tidy, table4b_tidy)
library(dplyr) # mengaktifkan paket dplyr
mydata <- left_join(table4a_tidy, table4b_tidy)
library(dplyr)
tb8
tb_all
gather(tb8, tb_all)
?who
